{{>
    const total = incomeData.reduce((sum, { percentage }) => sum + (percentage || 0), 0); 
    const waffleData = incomeData.reduce((res, { source, percentage }) => ({
        ...res,
        [source]: parseFloat((percentage || 0).toFixed(2)) 
    }), {});
    const series = incomeData.map(({ source, percentage }) => ({
        source,
        percentage: parseFloat((percentage || 0).toFixed(2)) 
    }));
}}
{{ comp.oi.chart.waffle({
    config: {
        data: [ waffleData ],
        size: [12, 6],
        width: 540,
        total: total,
        series: [
            { value: 'Earned income', colour: '#8F3E8D', tooltip:"Earned income: £{{ Earned income }}M" },
            { value: 'Individual donations', colour: '#33A38C', tooltip:"Earned income: £{{ Individual donations }}M" },
            { value: 'Corporate sponsorships', colour: '#00478A', tooltip:"Corporate sponsorships: £{{ Corporate sponsorships }}M" },
            { value: 'Trusts and foundations', colour: '#005837', tooltip:"Trusts and foundations: £{{ Trusts and foundations }}M" },
            { value: 'Public funding', colour: '#F25C29', tooltip:"Public funding: £{{ Public funding }}M" },
        ],
        legend: { show: true },
    }
}) }}