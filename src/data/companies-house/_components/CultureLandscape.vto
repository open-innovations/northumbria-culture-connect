<div
    id="{{ elementId || "map" }}"
    data-dependencies="/assets/vendor/leaflet/leaflet.css,/assets/vendor/leaflet/leaflet.js"
></div>

<style>
#map {
    width: 100%;
    aspect-ratio: 5/4;
}
</style>

<script type="module">
    const centre = {{ JSON.stringify(centre) }};
    const data = {{ JSON.stringify(data) }};
    const layers = {{ JSON.stringify(layers) }};
    const boundaries = {{ JSON.stringify(boundaries) }};

    const map = L.map('map', { scrollWheelZoom: false }).setView(centre, 13);
    map.attributionControl.setPrefix(false)

    const baseMap = L.tileLayer("https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png", {
        maxZoom: 20,
        attribution: "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OSM</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>",
        subdomains: "abcd",
    })

    baseMap.addTo(map);

    const layerControl = L.control.layers().addTo(map);

    const boundaryLayer = L.geoJSON(boundaries);
    boundaryLayer.addTo(map);

    const bounds = L.latLngBounds(); 
    bounds.extend(boundaryLayer.getBounds());

    const categories = data.map(l => {
        for (const r of layers) {
            if (l.sic_code.includes(r.code)) {
                return {
                    ...l,
                    code: r.code,
                }
            }
        }
        return {
            ...l,
            code: '99999 - Other organisation',
        }
    }).reduce((a, c) => ({ ...a, [c.code]: [
        ...(a[c.code] || []), c
    ]}), {});

    // Add each layer
    layers.forEach(config => {
        const name = config.code.split('-')[1].trim();
        const orgs = categories[config.code];
        const layer = L.featureGroup(
            orgs.map(
                o => L.circleMarker([o.lat, o.long], {
                    radius: 3,
                    color: config.colour || "#777777",
                    weight: 1,
                })
                .bindPopup(`<b>${o.registered_name}</b><br>${o.sic_code}`)
            )
        );
        bounds.extend(layer.getBounds());
        layer.addTo(map);
        layerControl.addOverlay(layer, name);
    })

    // Add scale control to map
    L.control.scale().addTo(map);

    map.flyToBounds(bounds);
</script>