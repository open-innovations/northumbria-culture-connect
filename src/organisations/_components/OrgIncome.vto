{{>
    const total = income.reduce((sum, { percentage }) => sum + (percentage || 0), 0); 
    const waffleData = income.reduce((res, { source, percentage }) => ({
        ...res,
        [source]: parseFloat((percentage || 0).toFixed(2)) 
    }), {});
    const colours = {
            'Earned income': '#8F3E8D',
            'Individual donations': '#33A38C',
            'Corporate sponsorships': '#00478A',
            'Trusts and foundations': '#005837',
            'Public funding': '#F25C29',
    }
    const series = income
        .filter(x => x.percentage > 0.5)
        .map(({ source, percentage }) => ({
            value: source,
            percentage: parseFloat((percentage || 0).toFixed(1)),
            colour: colours[source],
            tooltip: `${ source }: {{ ${source} }}%`
        }));
}}

{{ comp.oi.chart.waffle({
    config: {
        data: [ waffleData ],
        size: [12, 6],
        width: 540,
        total: total,
        series: series,
        legend: { show: true },
    }
}) }}